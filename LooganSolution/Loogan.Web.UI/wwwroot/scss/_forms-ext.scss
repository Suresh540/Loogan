$input-padding-top: $form-spacing / 2;
$input-padding-bottom: ($form-spacing / 2) + rem-calc(1);

#{text-inputs(all, 'input')},
.prefix,
.postfix,
select {
  // makes inputs equal height to normal buttons
  // fixes select input text alignment
  height: auto;
  min-height: rem-calc(38); // Prevents inputs from collapsing in mobile Safari as placeholders are removed.
  line-height: normal;
  padding-top: $input-padding-top;
  padding-bottom: $input-padding-bottom;
  transition: background-color 150ms, box-shadow 150ms, border-color 150ms;
}

#{text-inputs(all, 'input')},
select {
  border-radius: $input-border-radius;
  &:focus {
    @include input-focus-style;
  }
}

label.inline {
  // fixes inline label alignment
  line-height: normal;
  padding-top: $input-padding-top + rem-calc($input-border-width);
  padding-bottom: $input-padding-bottom + rem-calc($input-border-width);
}

select {
  // remove hover border color and match input focus style
  @if $input-include-glowing-effect {
    @include block-glowing-effect(focus, $glowing-effect-fade-time, $glowing-effect-color);
  }
  // override Foundation's select:hover
  &:hover {
    background-color: $input-bg-color;
    border-color: $input-border-color;
    &:focus {
      @include input-focus-style;
    }
  }
}

input[type=checkbox],
input[type=radio] {
  display: inline-block;
  width: rem-calc(20);
  height: rem-calc(20);
  margin-#{$opposite-direction}: 0;
  @include opacity(0);
  + label {
    cursor: pointer;
    display: inline-block;
    position: relative;
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    margin-bottom: $form-spacing;
    padding-#{$default-float}: rem-calc(8);
    font-weight: $weight-normal;
    &::before,
    &::after {
      content: "";
      position: absolute;
      display: block;
      width: rem-calc(20);
      height: rem-calc(20);
      top: 0;
      z-index: 2;
      font-size: rem-calc(14);
      #{$default-float}: rem-calc(-20); // pull over default input
      top: rem-calc(1);
      border-radius: $global-radius;
      @include transition(background 200ms, border-color 200ms, opacity 200ms);
    }
    &::before {
      background-color: $input-bg-color;
      border: 1px solid $input-border-color;
    }
    &::after {
      background-position: 50%;
      background-repeat: no-repeat;
      @include background-size(1em);
      opacity: 0;
    }
  }
  &:focus {
    + label {
      text-decoration: underline;
      &::before {
        outline: $focus-outline;
        outline-offset: 1px;
        border-color: $input-border-color;
      }
    }
    &:checked {
      + label::before {
        border-color: scale-color($grade-color-good, $lightness: -20%);
      }
    }
    .hide-focus-outline & + label {
      text-decoration: none;
      &::before {
        outline: none !important;
      }
    }
  }
  &:hover + label::after {
    opacity: .25;
  }
  &:checked {
    + label::before {
      background-color: $grade-color-good;
      border-color: scale-color($grade-color-good, $lightness: -20%);
    }
  }
  &:checked + label::after {
    opacity: .85;
  }
  &:disabled {
    + label {
      @include opacity(0.5);
      cursor: default;
    }
    + label::after {
      opacity: 0;
    }
    &:checked + label::after {
      opacity: .85;
    }
  }
}

input[type=checkbox] {
  + label::after {
    // url encoded svg: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" enable-background="new 0 0 16 16"><path stroke="#222" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" fill="none" d="M14 2.9L7.1 13.1 2 8"/></svg>
    background-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2016%2016%22%20enable-background%3D%22new%200%200%2016%2016%22%3E%3Cpath%20stroke%3D%22%23222%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-miterlimit%3D%2210%22%20fill%3D%22none%22%20d%3D%22M14%202.9L7.1%2013.1%202%208%22%2F%3E%3C%2Fsvg%3E');
  }
}

input[type=radio] {
  + label::before {
    border-radius: 100%;
  }
  + label::after {
    // url encoded svg: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" enable-background="new 0 0 16 16"><circle fill="#222" cx="8" cy="8" r="7"/></svg>
    background-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2016%2016%22%20enable-background%3D%22new%200%200%2016%2016%22%3E%3Ccircle%20fill%3D%22%23222%22%20cx%3D%228%22%20cy%3D%228%22%20r%3D%227%22%2F%3E%3C%2Fsvg%3E');
    font-size: rem-calc(10);
  }
}

// used when a checkbox/radio has a long/wrapping label
.checkbox-wrap,
.radio-wrap {
  @include inline-flex;
  input {
    @include flex(0, 0, auto);
    + label {
      margin-#{$opposite-direction}: rem-calc(10);
    }
  }
}